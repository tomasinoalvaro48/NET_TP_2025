@using API.Clients
@using API.Clients.EntitiesClients
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Blazor Server</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @if (canReadLocalidades)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="localidades">
                    <span class="oi oi-map"></span> Localidades
                </NavLink>
            </div>
        }
        @if (canReadZonas)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="zonas">
                    <span class="oi oi-map"></span> Zonas
                </NavLink>
            </div>
        }
        @if (canReadTiposAnomalia)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="tipos_anomalia">
                    <span class="oi oi-map"></span> TiposAnomalia
                </NavLink>
            </div>
        }
        @if (canReadUsuarios)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="usuarios">
                    <span class="oi oi-map"></span> Usuarios
                </NavLink>
            </div>
        }
        @if (canReadPedidosAgregacion)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="pedidosAgregacion">
                    <span class="oi oi-map"></span> PedidosAgregacion
                </NavLink>
            </div>
        }
        @if (canReadPedidosResolucion)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="pedidos-resolucion">
                    <span class="oi oi-map"></span> PedidosResolucion
                </NavLink>
            </div>
        }

        @* Reportes (solo Operador) *@
        @if (isOperador)
        {
            <div class="nav-item px-3">
                <button class="nav-link btn btn-link text-start px-0"
                        @onclick="DownloadReporteResolucion"
                        @onclick:stopPropagation="true">
                    <span class="oi oi-document"></span> Reporte Resolución
                </button>
            </div>
            <div class="nav-item px-3">
                <button class="nav-link btn btn-link text-start px-0"
                        @onclick="DownloadReporteAgregacion"
                        @onclick:stopPropagation="true">
                    <span class="oi oi-document"></span> Reporte Agregación
                </button>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool canReadLocalidades, canReadZonas, canReadTiposAnomalia, canReadUsuarios, canReadPedidosAgregacion, canReadPedidosResolucion;
    private bool isOperador;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await CheckPermissions();
        await base.OnInitializedAsync();
    }

    private async Task CheckPermissions()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            canReadLocalidades = canReadZonas = canReadTiposAnomalia = canReadUsuarios = canReadPedidosAgregacion = canReadPedidosResolucion = true;
            var currentUser = await AuthService.GetCurrentUserAsync();
            isOperador = string.Equals(currentUser?.Tipo_usu, "Operador", StringComparison.OrdinalIgnoreCase);
        }
        else
        {
            canReadLocalidades = canReadZonas = canReadTiposAnomalia = canReadUsuarios = canReadPedidosAgregacion = canReadPedidosResolucion = false;
            isOperador = false;
        }
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(bool authenticated) => InvokeAsync(CheckPermissions);

    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

    public void Dispose() => AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;

    private async Task DownloadReporteResolucion()
    {
        try
        {
            var bytes = await ReporteApiClient.ObtenerReportePedidosResolucionMesActualAsync();
            await DownloadBytesAsFile("ReportePedidosResolucion.pdf", "application/pdf", bytes);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al descargar reporte de resolución: {ex.Message}");
        }
    }

    private async Task DownloadReporteAgregacion()
    {
        try
        {
            var bytes = await ReporteApiClient.ObtenerReportePedidosAgregacionCategoriasAsync();
            await DownloadBytesAsFile("ReportePedidosAgregacion.pdf", "application/pdf", bytes);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al descargar reporte de agregación: {ex.Message}");
        }
    }

    private async Task DownloadBytesAsFile(string fileName, string contentType, byte[] bytes)
    {
        var base64 = Convert.ToBase64String(bytes);
        await JSRuntime.InvokeVoidAsync("downloadFileFromBytes", fileName, contentType, base64);
    }
}