@using API.Clients
@inject IAuthService AuthService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Blazor Server</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (canReadLocalidades)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="localidades">
                    <span class="oi oi-map"></span> Localidades
                </NavLink>
            </div>
        }
        @if (canReadTiposAnomalia)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="tipos_anomalia">
                    <span class="oi oi-map"></span> TiposAnomalia
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool canReadLocalidades = false;
    private bool canReadTiposAnomalia = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        // Suscribirse a cambios de autenticación
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await CheckPermissions();
        await base.OnInitializedAsync();
    }

    private async Task CheckPermissions()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            //canReadLocalidades = await AuthService.HasPermissionAsync("localidades.leer");
            //canReadTiposAnomalia = await AuthService.HasPermissionAsync("tipos_anomalia.leer");
            canReadLocalidades = true;
            canReadTiposAnomalia = true;
        }
        else
        {
            canReadLocalidades = false;
            canReadTiposAnomalia = false;
        }
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(bool authenticated)
    {
        InvokeAsync(async () =>
        {
            await CheckPermissions();
        });
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}