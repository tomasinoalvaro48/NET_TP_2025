@inherits LayoutComponentBase
@using API.Clients
@using DTOs
@inject IAuthService AuthService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Blazor.Server</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex justify-content-end">
            @if (isAuthenticated)
            {
                @if (canChangePassword)
                {
                    <button class="btn btn-primary btn-sm me-2" @onclick="CambiarContrasena">Cambiar Contraseña</button>
                }
                <button class="btn btn-primary btn-sm" @onclick="Logout">Cerrar Sesión</button>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool isAuthenticated = false;
    private bool canChangePassword = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthenticationState();
            AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CheckAuthenticationState()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        if (isAuthenticated)
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            canChangePassword = currentUser != null && 
                               (currentUser.Tipo_usu == "Denunciante" || currentUser.Tipo_usu == "Cazador");
        }
        else
        {
            canChangePassword = false;
        }
        
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(bool authenticated)
    {
        InvokeAsync(async () =>
        {
            await CheckAuthenticationState();
        });
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    private void CambiarContrasena()
    {
        Navigation.NavigateTo("/cambiar-contrasena");
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}