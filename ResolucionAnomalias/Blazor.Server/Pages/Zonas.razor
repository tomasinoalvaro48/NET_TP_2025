@page "/zonas"
@using DTOs
@using API.Clients
@using API.Clients.EntitiesClients
@using Blazor.Server.Components
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Zonas</PageTitle>

<AuthorizeRole Roles="Operador">
    <div class="container-fluid">
        <h3>Zonas</h3>

        <button class="btn btn-primary mb-3" @onclick="OpenAddModal">
            + Agregar
        </button>

        @if (zonas == null)
        {
            <p>Cargando...</p>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Localidad</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var zon in zonas)
                    {
                        <tr>
                            <td>@zon.Id</td>
                            <td>@zon.Nombre</td>
                            <td>@zon.LocalidadNombre</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OpenEditModal(zon)">Editar</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(zon)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</AuthorizeRole>

<ZonaModal @ref="zonaModal" OnZonaChanged="LoadZonas" />

@code {
    private List<ZonaDTO>? zonas;
    private ZonaModal zonaModal = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadZonas();
    }

    private async Task LoadZonas()
    {
        zonas = (await ZonaApiClient.GetAllAsync())?.ToList();
    }

    private Task OpenAddModal() => zonaModal.ShowAddModal();
    private Task OpenEditModal(ZonaDTO zon) => zonaModal.ShowEditModal(zon);

    private async Task ConfirmDelete(ZonaDTO zon)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Eliminar {zon.Nombre}?");
        if (confirm)
        {
            await ZonaApiClient.DeleteAsync(zon.Id);
            await LoadZonas();
        }
    }
}