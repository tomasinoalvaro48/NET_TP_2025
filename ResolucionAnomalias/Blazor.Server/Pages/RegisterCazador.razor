@page "/register-cazador"
@using DTOs
@using API.Clients
@using API.Clients.EntitiesClients
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Registro de Cazador</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header">
                    <h3>Registro de Cazador</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@currentCazador" OnValidSubmit="HandleValidSubmit">
                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <InputText @bind-Value="currentCazador.Nombre_usu" class="form-control" />
                            @if (validationErrors.ContainsKey("Nombre_usu"))
                            {
                                <div class="text-danger small">@validationErrors["Nombre_usu"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="currentCazador.Email_usu" type="email" class="form-control" />
                            @if (validationErrors.ContainsKey("Email_usu"))
                            {
                                <div class="text-danger small">@validationErrors["Email_usu"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Contraseña</label>
                            <InputText @bind-Value="currentCazador.Passw_usu" type="password" class="form-control" />
                            @if (validationErrors.ContainsKey("Passw_usu"))
                            {
                                <div class="text-danger small">@validationErrors["Passw_usu"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Confirmar Contraseña</label>
                            <InputText @bind-Value="RepetirPassw_usu" type="password" class="form-control" />
                            @if (validationErrors.ContainsKey("RepetirPassw_usu"))
                            {
                                <div class="text-danger small">@validationErrors["RepetirPassw_usu"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Localidad</label>
                            <select class="form-select" @onchange="OnLocalidadChanged">
                                <option value="">-- Seleccione una localidad --</option>
                                @if (localidades != null)
                                {
                                    foreach (var localidad in localidades)
                                    {
                                        <option value="@localidad.ID">@localidad.Nombre</option>
                                    }
                                }
                            </select>
                            @if (validationErrors.ContainsKey("LocalidadId"))
                            {
                                <div class="text-danger small">@validationErrors["LocalidadId"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Zona</label>
                            <InputSelect @bind-Value="currentCazador.ZonaId" class="form-select" disabled="@(!zonaEnabled)">
                                <option value="">-- Seleccione una zona --</option>
                                @if (zonas != null)
                                {
                                    foreach (var zona in zonas)
                                    {
                                        <option value="@zona.Id">@zona.Nombre</option>
                                    }
                                }
                            </InputSelect>
                            @if (validationErrors.ContainsKey("ZonaId"))
                            {
                                <div class="text-danger small">@validationErrors["ZonaId"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <a href="/login">¿Ya tienes una cuenta? Inicia sesión</a>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success">
                                @successMessage
                            </div>
                        }

                        <div class="d-flex justify-content-between mt-3">
                            <button type="submit" class="btn btn-primary" disabled="@saving">
                                @if (saving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Registrarse
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string RepetirPassw_usu = string.Empty;
    private UsuarioCreateDTO currentCazador = new();
    private bool saving = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private Dictionary<string, string> validationErrors = new();

    private List<LocalidadDTO>? localidades;
    private List<ZonaDTO>? zonas;
    private int? selectedLocalidadId;
    private bool zonaEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadLocalidades();
    }

    private async Task LoadLocalidades()
    {
        try
        {
            zonaEnabled = false;
            localidades = (await LocalidadApiClient.GetAllAsync())?.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar localidades: {ex.Message}";
        }
    }

    private async Task OnLocalidadChanged(ChangeEventArgs e)
    {
        ClearValidationErrors();
        zonas = null;
        zonaEnabled = false;
        currentCazador.ZonaId = null;

        if (int.TryParse(e.Value?.ToString(), out int localidadId) && localidadId > 0)
        {
            selectedLocalidadId = localidadId;
            try
            {
                zonas = (await ZonaApiClient.GetByLocalidadAsync(localidadId))?.ToList();
                zonaEnabled = true;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al cargar zonas: {ex.Message}";
            }
        }
        else
        {
            selectedLocalidadId = null;
        }

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (!Validate())
            return;

        try
        {
            saving = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            currentCazador.Tipo_usu = "Cazador";

            await UsuarioApiClient.AddAsync(currentCazador);

            successMessage = "Registro exitoso. Redirigiendo al inicio de sesión...";

            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al registrar usuario: {ex.Message}";
        }
        finally
        {
            saving = false;
        }
    }

    private bool Validate()
    {
        ClearValidationErrors();
        bool isValid = true;

        // Validar nombre
        if (string.IsNullOrWhiteSpace(currentCazador.Nombre_usu))
        {
            validationErrors["Nombre_usu"] = "El nombre es requerido";
            isValid = false;
        }
        else if (!Regex.IsMatch(currentCazador.Nombre_usu, @"^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$"))
        {
            validationErrors["Nombre_usu"] = "El nombre no puede tener números";
            isValid = false;
        }

        // Validar email
        if (string.IsNullOrWhiteSpace(currentCazador.Email_usu) || 
            !Regex.IsMatch(currentCazador.Email_usu, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            validationErrors["Email_usu"] = "Debe ingresar un email válido";
            isValid = false;
        }

        // Validar contraseña
        if (string.IsNullOrWhiteSpace(currentCazador.Passw_usu))
        {
            validationErrors["Passw_usu"] = "La contraseña es requerida";
            isValid = false;
        }
        else if (currentCazador.Passw_usu.Length < 6)
        {
            validationErrors["Passw_usu"] = "La contraseña debe tener mínimo 6 caracteres";
            isValid = false;
        }

        // Validar confirmación de contraseña
        if (RepetirPassw_usu != currentCazador.Passw_usu)
        {
            validationErrors["RepetirPassw_usu"] = "Las contraseñas no coinciden";
            isValid = false;
        }

        // Validar localidad
        if (!selectedLocalidadId.HasValue || selectedLocalidadId.Value <= 0)
        {
            validationErrors["LocalidadId"] = "Debe seleccionar una localidad";
            isValid = false;
        }

        // Validar zona
        if (!currentCazador.ZonaId.HasValue || currentCazador.ZonaId.Value <= 0)
        {
            validationErrors["ZonaId"] = "Debe seleccionar una zona";
            isValid = false;
        }

        StateHasChanged();
        return isValid;
    }

    private void ClearValidationErrors()
    {
        validationErrors.Clear();
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/login");
    }
}