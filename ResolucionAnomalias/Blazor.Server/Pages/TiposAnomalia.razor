@page "/tipos_anomalia"
@using DTOs
@using API.Clients
@using API.Clients.EntitiesClients
@using Blazor.Server.Components
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>TiposAnomalia</PageTitle>

<AuthorizeRole Roles="Operador">
    <div class="container-fluid">
        <h3>TiposAnomalia</h3>

        <button class="btn btn-primary mb-3" @onclick="OpenAddModal">
            + Agregar
        </button>

        @if (tipos_anomalia == null)
        {
            <p>Cargando...</p>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre</th>
                        <th>Dificultad</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var loc in tipos_anomalia)
                    {
                        <tr>
                            <td>@loc.Cod_anom</td>
                            <td>@loc.Nombre_anom</td>
                            <td>@loc.Dif_anom</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OpenEditModal(loc)">Editar</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(loc)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</AuthorizeRole>

<TipoAnomaliaModal @ref="tipoAnomaliaModal" OnTipoAnomaliaChanged="LoadTiposAnomalia" />

@code {
    private List<TipoAnomaliaDTO>? tipos_anomalia;
    private TipoAnomaliaModal tipoAnomaliaModal = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadTiposAnomalia();
    }

    private async Task LoadTiposAnomalia()
    {
        tipos_anomalia = (await TipoAnomaliaApiClient.GetAllAsync())?.ToList();
    }

    private Task OpenAddModal() => tipoAnomaliaModal.ShowAddModal();
    private Task OpenEditModal(TipoAnomaliaDTO loc) => tipoAnomaliaModal.ShowEditModal(loc);

    private async Task ConfirmDelete(TipoAnomaliaDTO loc)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Eliminar {loc.Nombre_anom}?");
        if (confirm)
        {
            await TipoAnomaliaApiClient.DeleteAsync(loc.Cod_anom);
            await LoadTiposAnomalia();
        }
    }
}