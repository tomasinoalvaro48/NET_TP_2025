@using DTOs
@using API.Clients.EntitiesClients
@inject PedidoResolucionApiClient PedidoResolucionApiClient
@inject ZonaApiClient ZonaApiClient
@inject TipoAnomaliaApiClient TipoAnomaliaApiClient
@inject IJSRuntime JS

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color:rgba(0,0,0,0.4)">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">@title</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>

                <div class="modal-body">

                    @if (pedido.Id > 0)
                    {
                        <div class="mb-2">
                            <label>ID</label>
                            <input class="form-control" disabled value="@pedido.Id" />
                        </div>
                    }

                    <div class="mb-2">
                        <label>Fecha</label>
                        <input class="form-control" disabled
                               value="@(pedido.Fecha == DateTime.MinValue ? "" : pedido.Fecha.ToString("dd/MM/yyyy"))" />
                    </div>

                    <div class="mb-2">
                        <label>Zona</label>
                        <select class="form-select" @bind="pedido.ZonaId">
                            <option value="">Seleccione...</option>
                            @foreach (var z in zonas)
                            {
                                <option value="@z.Id">@($"{z.LocalidadNombre} {z.Nombre}")</option>
                            }
                        </select>
                    </div>

                    <div class="mb-2">
                        <label>Descripción</label>
                        <textarea class="form-control" @bind="pedido.Descripcion"></textarea>
                    </div>

                    <div class="mb-2">
                        <label>Comentario</label>
                        <textarea class="form-control" @bind="pedido.Comentario"></textarea>
                    </div>

                    <div class="mb-3">
                        <label>Dificultad Total</label>
                        <input class="form-control" disabled value="@pedido.Dificultad" />
                    </div>

                    <!-- Tabla de anomalias -->
                    <div>
                        <h6>Anomalías</h6>
                        <button class="btn btn-sm btn-primary mb-2" @onclick="AddAnomalia">Agregar Anomalía</button>

                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th>Tipo</th>
                                    <th>Dificultad</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var a in pedido.Anomalias ?? new List<AnomaliaPedidoDTO>())
                                {
                                    <tr>
                                        <td>@a.TipoAnomaliaDescripcion</td>
                                        <td>@a.TipoAnomaliaDificultad</td>
                                        <td>
                                            <button class="btn btn-sm btn-danger" @onclick="(() => RemoveAnomalia(a))">X</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                    <button class="btn btn-success" @onclick="Save">Aceptar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter] public EventCallback OnSaved { get; set; }

    private bool showModal = false;
    private string title = "";
    private PedidoResolucionDTO pedido = new();
    private List<ZonaDTO> zonas = new();
    private List<TipoAnomaliaDTO> tipos = new();

    public async Task OpenForAdd()
    {
        pedido = new() { Fecha = DateTime.Now };
        title = "Nuevo Pedido Resolución";
        showModal = true;
        await LoadData();
        StateHasChanged();
    }

    public async Task OpenForEdit(int id)
    {
        try
        {
            pedido = await PedidoResolucionApiClient.GetAsync(id);
            title = $"Editar Pedido {id}";
            showModal = true;
            await LoadData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar pedido: {ex.Message}");
        }
    }

    private async Task LoadData()
    {
        zonas = (await ZonaApiClient.GetAllAsync()).ToList();
        tipos = (await TipoAnomaliaApiClient.GetAllAsync()).ToList();
        StateHasChanged();
    }

    private void AddAnomalia()
    {
        if (pedido.Anomalias == null)
            pedido.Anomalias = new List<AnomaliaPedidoDTO>();

        var tipo = tipos.FirstOrDefault(); // por defecto
        if (tipo != null)
        {
            pedido.Anomalias.Add(new()
                {
                    TipoAnomaliaId = tipo.Cod_anom,
                    TipoAnomaliaDescripcion = tipo.Nombre_anom,
                    TipoAnomaliaDificultad = tipo.Dif_anom
                });
        }
    }

    private void RemoveAnomalia(AnomaliaPedidoDTO a)
    {
        pedido.Anomalias.Remove(a);
    }

    private async Task Save()
    {
        if (pedido.Id == 0)
            await PedidoResolucionApiClient.AddAsync(pedido);
        else
            await PedidoResolucionApiClient.UpdateAsync(pedido);

        await OnSaved.InvokeAsync();
        Close();
    }

    private void Close()
    {
        showModal = false;
    }
}