@using DTOs
@using API.Clients
@using API.Clients.EntitiesClients
@inject IJSRuntime JS
@inject IAuthService AuthService

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color:rgba(0,0,0,0.4)">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title">@title</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>

                <div class="modal-body">

                    @if (!IsAdd)
                    {
                        <div class="mb-2">
                            <label>ID</label>
                            <input class="form-control" disabled value="@pedido.Id" />
                        </div>
                    }

                    <div class="mb-2">
                        <label>Fecha</label>
                        <input class="form-control" disabled
                               value="@(pedido.Fecha == DateTime.MinValue ? "" : pedido.Fecha.ToString("dd/MM/yyyy"))" />
                    </div>

                    <div class="mb-2">
                        <label>Zona</label>
                        <select class="form-select" @bind="pedido.ZonaId" disabled="@(!CanEditCamposBasicos)">
                            <option value="">Seleccione...</option>
                            @foreach (var z in zonas)       
                            {
                                <option value="@z.Id">@($"{z.LocalidadNombre} {z.Nombre}")</option>
                            }
                        </select>
                    </div>

                    <div class="mb-2">
                        <label>Dirección</label>
                        <input class="form-control" @bind="pedido.Direccion" disabled="@(!CanEditCamposBasicos)" />
                    </div>

                    <div class="mb-2">
                        <label>Descripción</label>
                        <textarea class="form-control" @bind="pedido.Descripcion" readonly="@(!CanEditCamposBasicos)"></textarea>
                    </div>

                    @if (!IsAdd)
                    {
                        <div class="mb-2">
                            <label>Comentario</label>
                            <textarea class="form-control" @bind="pedido.Comentario"></textarea>
                        </div>
                    }

                    <div class="mb-3">
                        <label>Dificultad Total</label>
                        <input class="form-control" disabled value="@pedido.Dificultad" />
                    </div>

                    <div>
                        <h6>Anomalías</h6>

                        @if (CanEditAnomalias)
                        {
                            <button class="btn btn-sm btn-primary mb-2" @onclick="OpenAnomaliasModal">Agregar Anomalía</button>
                        }

                        <table class="table table-sm table-bordered">
                            <thead>
                                <tr>
                                    <th>Tipo</th>
                                    <th>Dificultad</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var a in pedido.Anomalias ?? new List<AnomaliaPedidoDTO>())
                                {
                                    <tr>
                                        <td>@a.TipoAnomaliaDescripcion</td>
                                        <td>@a.TipoAnomaliaDificultad</td>
                                        <td>
                                            @if (CanEditAnomalias)
                                            {
                                                <button class="btn btn-sm btn-danger" @onclick="(() => RemoveAnomalia(a))">X</button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
                    <button class="btn btn-success" @onclick="Save">@acceptButtonText</button>
                </div>
            </div>
        </div>
    </div>
}

<AnomaliasModal @ref="anomaliasModal" OnSelected="OnAnomaliaSelected" />

@code {
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool showModal = false;
    private string title = "";
    private string acceptButtonText = "Aceptar";
    private PedidoResolucionDTO pedido = new();
    private List<ZonaDTO> zonas = new();
    private string errorMessage = string.Empty;
    private AnomaliasModal anomaliasModal = null!;

    private bool IsAdd => pedido.Id == 0;
    private bool IsCazador { get; set; }
    private bool IsDenunciante { get; set; }

    private bool CanEditCamposBasicos => !(IsCazador && !IsAdd);
    private bool CanEditAnomalias => !(IsCazador && !IsAdd);

    public async Task OpenForAdd()
    {
        await LoadCurrentUserAsync();

        pedido = new() { Fecha = DateTime.Now, Estado = "activo" };
        title = "Nuevo Pedido Resolución";
        errorMessage = string.Empty;
        acceptButtonText = "Realizar Pedido";
        showModal = true;

        // Denunciante es dueño del pedido en alta
        if (IsDenunciante)
        {
            // Se asignará también en Save() por si cambia sesión
        }

        await LoadData();
        StateHasChanged();
    }

    public async Task OpenForEdit(int id)
    {
        try
        {
            await LoadCurrentUserAsync();

            errorMessage = string.Empty;
            pedido = await PedidoResolucionApiClient.GetAsync(id);
            title = $"Editar Pedido {id}";
            acceptButtonText = IsCazador ? "Aceptar pedido" : "Guardar";
            showModal = true;

            await LoadData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar pedido: {ex.Message}");
        }
    }

    private async Task LoadCurrentUserAsync()
    {
        var email = await AuthService.GetUsernameAsync();
        IsCazador = false;
        IsDenunciante = false;

        if (!string.IsNullOrWhiteSpace(email))
        {
            var usuarios = await UsuarioApiClient.GetAllAsync();
            var user = usuarios.FirstOrDefault(u => u.Email_usu.Equals(email, StringComparison.OrdinalIgnoreCase));
            IsCazador = string.Equals(user?.Tipo_usu, "Cazador", StringComparison.OrdinalIgnoreCase);
            IsDenunciante = string.Equals(user?.Tipo_usu, "Denunciante", StringComparison.OrdinalIgnoreCase);
        }
    }

    private async Task LoadData()
    {
        zonas = (await ZonaApiClient.GetAllAsync()).ToList();
        StateHasChanged();
    }

    private async Task OpenAnomaliasModal()
    {
        await anomaliasModal.ShowAsync();
    }

    private void OnAnomaliaSelected(AnomaliaPedidoDTO a)
    {
        pedido.Anomalias ??= new List<AnomaliaPedidoDTO>();
        if (!pedido.Anomalias.Any(x => x.TipoAnomaliaId == a.TipoAnomaliaId))
        {
            pedido.Anomalias.Add(a);
        }
    }

    private void RemoveAnomalia(AnomaliaPedidoDTO a)
    {
        pedido.Anomalias?.Remove(a);
    }

    private async Task Save()
    {
        try
        {
            errorMessage = string.Empty;

            // Flujo Cazador (solo edición): aceptar pedido
            if (!IsAdd && IsCazador)
            {
                var email = await AuthService.GetUsernameAsync();
                var usuarios = await UsuarioApiClient.GetAllAsync();
                var user = usuarios.FirstOrDefault(u => u.Email_usu.Equals(email, StringComparison.OrdinalIgnoreCase));

                if (user == null)
                {
                    errorMessage = "Sesión inválida. Inicie sesión nuevamente.";
                    return;
                }

                pedido.CazadorId = user.Cod_usu;
                pedido.CazadorNombre = user.Nombre_usu;
                pedido.Estado = "aceptado";

                await PedidoResolucionApiClient.UpdateAsync(pedido);
                await OnSaved.InvokeAsync();
                Close();
                return;
            }

            // Flujo Denunciante (alta/edición)
            if (!await ValidateDenuncianteAsync())
                return;

            if (IsAdd)
            {
                // Setear denunciante actual
                var email = await AuthService.GetUsernameAsync();
                var usuarios = await UsuarioApiClient.GetAllAsync();
                var user = usuarios.FirstOrDefault(u => u.Email_usu.Equals(email, StringComparison.OrdinalIgnoreCase));

                if (user == null)
                {
                    errorMessage = "Sesión inválida. Inicie sesión nuevamente.";
                    return;
                }

                pedido.DenuncianteId = user.Cod_usu;
                pedido.DenuncianteNombre = user.Nombre_usu;

                await PedidoResolucionApiClient.AddAsync(pedido);
            }
            else
            {
                await PedidoResolucionApiClient.UpdateAsync(pedido);
            }

            await OnSaved.InvokeAsync();
            Close();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task<bool> ValidateDenuncianteAsync()
    {
        // Si no es denunciante y está intentando crear, bloquear
        if (IsAdd && !IsDenunciante)
        {
            errorMessage = "Solo un usuario de tipo Denunciante puede crear nuevos pedidos.";
            return false;
        }

        // Validaciones equivalentes a WinForms
        if (pedido.ZonaId <= 0)
        {
            errorMessage = "Debe seleccionar una zona.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(pedido.Direccion))
        {
            errorMessage = "La dirección no puede estar vacía.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(pedido.Descripcion))
        {
            errorMessage = "La descripción no puede estar vacía.";
            return false;
        }

        if (pedido.Anomalias == null || pedido.Anomalias.Count == 0)
        {
            errorMessage = "Debe agregar al menos una anomalía.";
            return false;
        }

        // En alta no se permite comentario (oculto), no validar comentario aquí
        return true;
    }

    private void Close()
    {
        showModal = false;
    }
}